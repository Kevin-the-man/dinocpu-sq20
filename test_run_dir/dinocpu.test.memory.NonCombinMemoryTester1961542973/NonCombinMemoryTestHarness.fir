;buildInfoPackage: chisel3, version: 3.2.4, scalaVersion: 2.12.10, sbtVersion: 1.3.2
circuit NonCombinMemoryTestHarness : 
  module INonCombinMemPort : 
    input clock : Clock
    input reset : Reset
    output io : {pipeline : {flip address : UInt<32>, flip valid : UInt<1>, good : UInt<1>, instruction : UInt<32>, ready : UInt<1>}, flip bus : {flip request : {flip ready : UInt<1>, valid : UInt<1>, bits : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}}, response : {valid : UInt<1>, bits : {data : UInt<32>}}}}
    
    wire _T : {flip address : UInt<32>, flip valid : UInt<1>, good : UInt<1>, instruction : UInt<32>, ready : UInt<1>} @[base-memory-components.scala 52:31]
    _T.ready <= UInt<1>("h00") @[base-memory-components.scala 52:31]
    _T.instruction <= UInt<32>("h00") @[base-memory-components.scala 52:31]
    _T.good <= UInt<1>("h00") @[base-memory-components.scala 52:31]
    _T.valid <= UInt<1>("h00") @[base-memory-components.scala 52:31]
    _T.address <= UInt<32>("h00") @[base-memory-components.scala 52:31]
    io.pipeline.ready <= _T.ready @[base-memory-components.scala 52:15]
    io.pipeline.instruction <= _T.instruction @[base-memory-components.scala 52:15]
    io.pipeline.good <= _T.good @[base-memory-components.scala 52:15]
    _T.valid <= io.pipeline.valid @[base-memory-components.scala 52:15]
    _T.address <= io.pipeline.address @[base-memory-components.scala 52:15]
    io.bus.response.bits.data is invalid @[base-memory-components.scala 57:15]
    io.bus.response.valid is invalid @[base-memory-components.scala 57:15]
    io.bus.request.bits.operation is invalid @[base-memory-components.scala 57:15]
    io.bus.request.bits.writedata is invalid @[base-memory-components.scala 57:15]
    io.bus.request.bits.address is invalid @[base-memory-components.scala 57:15]
    io.bus.request.valid is invalid @[base-memory-components.scala 57:15]
    io.bus.request.ready is invalid @[base-memory-components.scala 57:15]
    when io.pipeline.valid : @[memory-combin-ports.scala 16:28]
      wire _T_1 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>} @[memory-combin-ports.scala 17:23]
      _T_1.address <= io.pipeline.address @[memory-combin-ports.scala 18:23]
      _T_1.operation <= UInt<1>("h00") @[memory-combin-ports.scala 19:23]
      _T_1.writedata <= UInt<1>("h00") @[memory-combin-ports.scala 20:23]
      io.bus.request.bits.operation <= _T_1.operation @[memory-combin-ports.scala 22:26]
      io.bus.request.bits.writedata <= _T_1.writedata @[memory-combin-ports.scala 22:26]
      io.bus.request.bits.address <= _T_1.address @[memory-combin-ports.scala 22:26]
      io.bus.request.valid <= UInt<1>("h01") @[memory-combin-ports.scala 23:26]
      skip @[memory-combin-ports.scala 16:28]
    else : @[memory-combin-ports.scala 24:16]
      io.bus.request.valid <= UInt<1>("h00") @[memory-combin-ports.scala 25:26]
      skip @[memory-combin-ports.scala 24:16]
    io.pipeline.ready <= UInt<1>("h01") @[memory-combin-ports.scala 29:21]
    io.pipeline.good <= UInt<1>("h01") @[memory-combin-ports.scala 32:20]
    io.pipeline.instruction <= io.bus.response.bits.data @[memory-combin-ports.scala 33:27]
    reg imemBusy : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[memory-noncombin-ports.scala 28:25]
    io.pipeline.good <= io.bus.response.valid @[memory-noncombin-ports.scala 30:20]
    when io.pipeline.valid : @[memory-noncombin-ports.scala 32:28]
      imemBusy <= UInt<1>("h01") @[memory-noncombin-ports.scala 33:14]
      skip @[memory-noncombin-ports.scala 32:28]
    else : @[memory-noncombin-ports.scala 34:39]
      when io.bus.response.valid : @[memory-noncombin-ports.scala 34:39]
        imemBusy <= UInt<1>("h00") @[memory-noncombin-ports.scala 35:14]
        skip @[memory-noncombin-ports.scala 34:39]
    node _T_2 = eq(imemBusy, UInt<1>("h00")) @[memory-noncombin-ports.scala 38:24]
    io.pipeline.ready <= _T_2 @[memory-noncombin-ports.scala 38:21]
    
  module DNonCombinMemPort : 
    input clock : Clock
    input reset : Reset
    output io : {pipeline : {flip address : UInt<32>, flip valid : UInt<1>, good : UInt<1>, flip writedata : UInt<32>, flip memread : UInt<1>, flip memwrite : UInt<1>, flip maskmode : UInt<2>, flip sext : UInt<1>, readdata : UInt<32>}, flip bus : {flip request : {flip ready : UInt<1>, valid : UInt<1>, bits : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}}, response : {valid : UInt<1>, bits : {data : UInt<32>}}}}
    
    wire _T : {flip address : UInt<32>, flip valid : UInt<1>, good : UInt<1>, flip writedata : UInt<32>, flip memread : UInt<1>, flip memwrite : UInt<1>, flip maskmode : UInt<2>, flip sext : UInt<1>, readdata : UInt<32>} @[base-memory-components.scala 69:31]
    _T.readdata <= UInt<32>("h00") @[base-memory-components.scala 69:31]
    _T.sext <= UInt<1>("h00") @[base-memory-components.scala 69:31]
    _T.maskmode <= UInt<2>("h00") @[base-memory-components.scala 69:31]
    _T.memwrite <= UInt<1>("h00") @[base-memory-components.scala 69:31]
    _T.memread <= UInt<1>("h00") @[base-memory-components.scala 69:31]
    _T.writedata <= UInt<32>("h00") @[base-memory-components.scala 69:31]
    _T.good <= UInt<1>("h00") @[base-memory-components.scala 69:31]
    _T.valid <= UInt<1>("h00") @[base-memory-components.scala 69:31]
    _T.address <= UInt<32>("h00") @[base-memory-components.scala 69:31]
    io.pipeline.readdata <= _T.readdata @[base-memory-components.scala 69:15]
    _T.sext <= io.pipeline.sext @[base-memory-components.scala 69:15]
    _T.maskmode <= io.pipeline.maskmode @[base-memory-components.scala 69:15]
    _T.memwrite <= io.pipeline.memwrite @[base-memory-components.scala 69:15]
    _T.memread <= io.pipeline.memread @[base-memory-components.scala 69:15]
    _T.writedata <= io.pipeline.writedata @[base-memory-components.scala 69:15]
    io.pipeline.good <= _T.good @[base-memory-components.scala 69:15]
    _T.valid <= io.pipeline.valid @[base-memory-components.scala 69:15]
    _T.address <= io.pipeline.address @[base-memory-components.scala 69:15]
    io.bus.response.bits.data is invalid @[base-memory-components.scala 74:15]
    io.bus.response.valid is invalid @[base-memory-components.scala 74:15]
    io.bus.request.bits.operation is invalid @[base-memory-components.scala 74:15]
    io.bus.request.bits.writedata is invalid @[base-memory-components.scala 74:15]
    io.bus.request.bits.address is invalid @[base-memory-components.scala 74:15]
    io.bus.request.valid is invalid @[base-memory-components.scala 74:15]
    io.bus.request.ready is invalid @[base-memory-components.scala 74:15]
    io.pipeline.good <= io.bus.response.valid @[base-memory-components.scala 76:20]
    reg outstandingReq : {valid : UInt<1>, bits : {address : UInt<32>, writedata : UInt<32>, maskmode : UInt<2>, operation : UInt<2>, sext : UInt<1>}}, clock @[memory-noncombin-ports.scala 50:28]
    outstandingReq.valid <= UInt<1>("h00") @[memory-noncombin-ports.scala 51:24]
    wire sending : UInt<1> @[memory-noncombin-ports.scala 54:21]
    node _T_1 = eq(outstandingReq.valid, UInt<1>("h00")) @[memory-noncombin-ports.scala 62:15]
    node _T_2 = eq(outstandingReq.bits.operation, UInt<1>("h00")) @[memory-noncombin-ports.scala 62:121]
    node _T_3 = and(outstandingReq.valid, _T_2) @[memory-noncombin-ports.scala 62:88]
    node _T_4 = and(io.bus.response.valid, _T_3) @[memory-noncombin-ports.scala 62:63]
    node ready = or(_T_1, _T_4) @[memory-noncombin-ports.scala 62:37]
    node _T_5 = or(io.pipeline.memread, io.pipeline.memwrite) @[memory-noncombin-ports.scala 63:51]
    node _T_6 = and(io.pipeline.valid, _T_5) @[memory-noncombin-ports.scala 63:27]
    node _T_7 = and(_T_6, ready) @[memory-noncombin-ports.scala 63:76]
    when _T_7 : @[memory-noncombin-ports.scala 63:86]
      node _T_8 = and(io.pipeline.memread, io.pipeline.memwrite) @[memory-noncombin-ports.scala 65:36]
      node _T_9 = eq(_T_8, UInt<1>("h00")) @[memory-noncombin-ports.scala 65:13]
      node _T_10 = asUInt(reset) @[memory-noncombin-ports.scala 65:12]
      node _T_11 = or(_T_9, _T_10) @[memory-noncombin-ports.scala 65:12]
      node _T_12 = eq(_T_11, UInt<1>("h00")) @[memory-noncombin-ports.scala 65:12]
      when _T_12 : @[memory-noncombin-ports.scala 65:12]
        printf(clock, UInt<1>(1), "Assertion failed\n    at memory-noncombin-ports.scala:65 assert (! (io.pipeline.memread && io.pipeline.memwrite))\n") @[memory-noncombin-ports.scala 65:12]
        stop(clock, UInt<1>(1), 1) @[memory-noncombin-ports.scala 65:12]
        skip @[memory-noncombin-ports.scala 65:12]
      outstandingReq.bits.address <= io.pipeline.address @[memory-noncombin-ports.scala 70:35]
      outstandingReq.bits.writedata <= io.pipeline.writedata @[memory-noncombin-ports.scala 71:35]
      outstandingReq.bits.maskmode <= io.pipeline.maskmode @[memory-noncombin-ports.scala 72:35]
      outstandingReq.bits.sext <= io.pipeline.sext @[memory-noncombin-ports.scala 73:35]
      when io.pipeline.memwrite : @[memory-noncombin-ports.scala 74:33]
        outstandingReq.bits.operation <= UInt<1>("h01") @[memory-noncombin-ports.scala 75:37]
        skip @[memory-noncombin-ports.scala 74:33]
      else : @[memory-noncombin-ports.scala 76:18]
        outstandingReq.bits.operation <= UInt<1>("h00") @[memory-noncombin-ports.scala 77:37]
        skip @[memory-noncombin-ports.scala 76:18]
      sending <= UInt<1>("h01") @[memory-noncombin-ports.scala 79:13]
      io.bus.request.bits.address <= io.pipeline.address @[memory-noncombin-ports.scala 82:35]
      io.bus.request.bits.writedata <= UInt<1>("h00") @[memory-noncombin-ports.scala 83:35]
      io.bus.request.bits.operation <= UInt<1>("h00") @[memory-noncombin-ports.scala 84:35]
      io.bus.request.valid <= UInt<1>("h01") @[memory-noncombin-ports.scala 85:35]
      skip @[memory-noncombin-ports.scala 63:86]
    else : @[memory-noncombin-ports.scala 86:16]
      io.bus.request.valid <= UInt<1>("h00") @[memory-noncombin-ports.scala 88:26]
      sending <= UInt<1>("h00") @[memory-noncombin-ports.scala 89:13]
      skip @[memory-noncombin-ports.scala 86:16]
    when io.bus.response.valid : @[memory-noncombin-ports.scala 93:32]
      node _T_13 = asUInt(reset) @[memory-noncombin-ports.scala 94:11]
      node _T_14 = or(outstandingReq.valid, _T_13) @[memory-noncombin-ports.scala 94:11]
      node _T_15 = eq(_T_14, UInt<1>("h00")) @[memory-noncombin-ports.scala 94:11]
      when _T_15 : @[memory-noncombin-ports.scala 94:11]
        printf(clock, UInt<1>(1), "Assertion failed\n    at memory-noncombin-ports.scala:94 assert(outstandingReq.valid)\n") @[memory-noncombin-ports.scala 94:11]
        stop(clock, UInt<1>(1), 1) @[memory-noncombin-ports.scala 94:11]
        skip @[memory-noncombin-ports.scala 94:11]
      node _T_16 = eq(outstandingReq.bits.operation, UInt<1>("h01")) @[memory-noncombin-ports.scala 95:41]
      when _T_16 : @[memory-noncombin-ports.scala 95:68]
        wire _T_17 : UInt<32> @[memory-noncombin-ports.scala 96:28]
        node _T_18 = neq(outstandingReq.bits.maskmode, UInt<2>("h02")) @[memory-noncombin-ports.scala 99:42]
        when _T_18 : @[memory-noncombin-ports.scala 99:51]
          node _T_19 = bits(outstandingReq.bits.address, 1, 0) @[memory-noncombin-ports.scala 101:50]
          wire _T_20 : UInt<32> @[memory-noncombin-ports.scala 102:29]
          _T_20 <= io.bus.response.bits.data @[memory-noncombin-ports.scala 103:18]
          node _T_21 = eq(io.pipeline.maskmode, UInt<1>("h00")) @[memory-noncombin-ports.scala 105:36]
          when _T_21 : @[memory-noncombin-ports.scala 105:45]
            node _T_22 = eq(_T_19, UInt<1>("h00")) @[memory-noncombin-ports.scala 106:23]
            when _T_22 : @[memory-noncombin-ports.scala 106:32]
              node _T_23 = bits(_T_20, 31, 8) @[memory-noncombin-ports.scala 107:38]
              node _T_24 = bits(io.pipeline.writedata, 7, 0) @[memory-noncombin-ports.scala 107:67]
              node _T_25 = cat(_T_23, _T_24) @[Cat.scala 29:58]
              _T_17 <= _T_25 @[memory-noncombin-ports.scala 107:23]
              skip @[memory-noncombin-ports.scala 106:32]
            else : @[memory-noncombin-ports.scala 108:38]
              node _T_26 = eq(_T_19, UInt<1>("h01")) @[memory-noncombin-ports.scala 108:29]
              when _T_26 : @[memory-noncombin-ports.scala 108:38]
                node _T_27 = bits(_T_20, 31, 16) @[memory-noncombin-ports.scala 109:38]
                node _T_28 = bits(io.pipeline.writedata, 15, 8) @[memory-noncombin-ports.scala 109:72]
                node _T_29 = bits(_T_20, 7, 0) @[memory-noncombin-ports.scala 109:88]
                node _T_30 = cat(_T_28, _T_29) @[Cat.scala 29:58]
                node _T_31 = cat(_T_27, _T_30) @[Cat.scala 29:58]
                _T_17 <= _T_31 @[memory-noncombin-ports.scala 109:23]
                skip @[memory-noncombin-ports.scala 108:38]
              else : @[memory-noncombin-ports.scala 110:38]
                node _T_32 = eq(_T_19, UInt<2>("h02")) @[memory-noncombin-ports.scala 110:29]
                when _T_32 : @[memory-noncombin-ports.scala 110:38]
                  node _T_33 = bits(_T_20, 31, 24) @[memory-noncombin-ports.scala 111:38]
                  node _T_34 = bits(io.pipeline.writedata, 23, 16) @[memory-noncombin-ports.scala 111:72]
                  node _T_35 = bits(_T_20, 15, 0) @[memory-noncombin-ports.scala 111:88]
                  node _T_36 = cat(_T_34, _T_35) @[Cat.scala 29:58]
                  node _T_37 = cat(_T_33, _T_36) @[Cat.scala 29:58]
                  _T_17 <= _T_37 @[memory-noncombin-ports.scala 111:23]
                  skip @[memory-noncombin-ports.scala 110:38]
                else : @[memory-noncombin-ports.scala 112:23]
                  node _T_38 = bits(io.pipeline.writedata, 31, 24) @[memory-noncombin-ports.scala 113:51]
                  node _T_39 = bits(_T_20, 23, 0) @[memory-noncombin-ports.scala 113:68]
                  node _T_40 = cat(_T_38, _T_39) @[Cat.scala 29:58]
                  _T_17 <= _T_40 @[memory-noncombin-ports.scala 113:23]
                  skip @[memory-noncombin-ports.scala 112:23]
            skip @[memory-noncombin-ports.scala 105:45]
          else : @[memory-noncombin-ports.scala 115:22]
            node _T_41 = eq(_T_19, UInt<1>("h00")) @[memory-noncombin-ports.scala 116:24]
            when _T_41 : @[memory-noncombin-ports.scala 116:33]
              node _T_42 = bits(_T_20, 31, 16) @[memory-noncombin-ports.scala 117:38]
              node _T_43 = bits(io.pipeline.writedata, 15, 0) @[memory-noncombin-ports.scala 117:67]
              node _T_44 = cat(_T_42, _T_43) @[Cat.scala 29:58]
              _T_17 <= _T_44 @[memory-noncombin-ports.scala 117:23]
              skip @[memory-noncombin-ports.scala 116:33]
            else : @[memory-noncombin-ports.scala 118:23]
              node _T_45 = bits(io.pipeline.writedata, 31, 16) @[memory-noncombin-ports.scala 119:51]
              node _T_46 = bits(_T_20, 15, 0) @[memory-noncombin-ports.scala 119:68]
              node _T_47 = cat(_T_45, _T_46) @[Cat.scala 29:58]
              _T_17 <= _T_47 @[memory-noncombin-ports.scala 119:23]
              skip @[memory-noncombin-ports.scala 118:23]
            skip @[memory-noncombin-ports.scala 115:22]
          skip @[memory-noncombin-ports.scala 99:51]
        else : @[memory-noncombin-ports.scala 122:20]
          _T_17 <= outstandingReq.bits.writedata @[memory-noncombin-ports.scala 124:19]
          skip @[memory-noncombin-ports.scala 122:20]
        wire _T_48 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>} @[memory-noncombin-ports.scala 128:26]
        _T_48.address <= outstandingReq.bits.address @[memory-noncombin-ports.scala 129:25]
        _T_48.writedata <= _T_17 @[memory-noncombin-ports.scala 130:25]
        _T_48.operation <= UInt<1>("h01") @[memory-noncombin-ports.scala 131:25]
        io.bus.request.bits.operation <= _T_48.operation @[memory-noncombin-ports.scala 132:28]
        io.bus.request.bits.writedata <= _T_48.writedata @[memory-noncombin-ports.scala 132:28]
        io.bus.request.bits.address <= _T_48.address @[memory-noncombin-ports.scala 132:28]
        io.bus.request.valid <= UInt<1>("h01") @[memory-noncombin-ports.scala 133:28]
        skip @[memory-noncombin-ports.scala 95:68]
      else : @[memory-noncombin-ports.scala 134:18]
        wire _T_49 : UInt<32> @[memory-noncombin-ports.scala 137:36]
        wire _T_50 : UInt<32> @[memory-noncombin-ports.scala 138:36]
        node _T_51 = bits(outstandingReq.bits.address, 1, 0) @[memory-noncombin-ports.scala 140:47]
        node _T_52 = eq(outstandingReq.bits.maskmode, UInt<1>("h00")) @[memory-noncombin-ports.scala 141:42]
        when _T_52 : @[memory-noncombin-ports.scala 141:51]
          node _T_53 = mul(_T_51, UInt<4>("h08")) @[memory-noncombin-ports.scala 143:64]
          node _T_54 = dshr(io.bus.response.bits.data, _T_53) @[memory-noncombin-ports.scala 143:53]
          node _T_55 = and(_T_54, UInt<8>("h0ff")) @[memory-noncombin-ports.scala 143:72]
          _T_49 <= _T_55 @[memory-noncombin-ports.scala 143:23]
          skip @[memory-noncombin-ports.scala 141:51]
        else : @[memory-noncombin-ports.scala 144:58]
          node _T_56 = eq(outstandingReq.bits.maskmode, UInt<1>("h01")) @[memory-noncombin-ports.scala 144:49]
          when _T_56 : @[memory-noncombin-ports.scala 144:58]
            node _T_57 = mul(_T_51, UInt<4>("h08")) @[memory-noncombin-ports.scala 146:64]
            node _T_58 = dshr(io.bus.response.bits.data, _T_57) @[memory-noncombin-ports.scala 146:53]
            node _T_59 = and(_T_58, UInt<16>("h0ffff")) @[memory-noncombin-ports.scala 146:72]
            _T_49 <= _T_59 @[memory-noncombin-ports.scala 146:23]
            skip @[memory-noncombin-ports.scala 144:58]
          else : @[memory-noncombin-ports.scala 147:20]
            _T_49 <= io.bus.response.bits.data @[memory-noncombin-ports.scala 148:23]
            skip @[memory-noncombin-ports.scala 147:20]
        when outstandingReq.bits.sext : @[memory-noncombin-ports.scala 151:39]
          node _T_60 = eq(outstandingReq.bits.maskmode, UInt<1>("h00")) @[memory-noncombin-ports.scala 152:44]
          when _T_60 : @[memory-noncombin-ports.scala 152:53]
            node _T_61 = bits(_T_49, 7, 7) @[memory-noncombin-ports.scala 154:59]
            node _T_62 = bits(_T_61, 0, 0) @[Bitwise.scala 71:15]
            node _T_63 = mux(_T_62, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 71:12]
            node _T_64 = bits(_T_49, 7, 0) @[memory-noncombin-ports.scala 154:79]
            node _T_65 = cat(_T_63, _T_64) @[Cat.scala 29:58]
            _T_50 <= _T_65 @[memory-noncombin-ports.scala 154:30]
            skip @[memory-noncombin-ports.scala 152:53]
          else : @[memory-noncombin-ports.scala 155:60]
            node _T_66 = eq(outstandingReq.bits.maskmode, UInt<1>("h01")) @[memory-noncombin-ports.scala 155:51]
            when _T_66 : @[memory-noncombin-ports.scala 155:60]
              node _T_67 = bits(_T_49, 15, 15) @[memory-noncombin-ports.scala 157:59]
              node _T_68 = bits(_T_67, 0, 0) @[Bitwise.scala 71:15]
              node _T_69 = mux(_T_68, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 71:12]
              node _T_70 = bits(_T_49, 15, 0) @[memory-noncombin-ports.scala 157:79]
              node _T_71 = cat(_T_69, _T_70) @[Cat.scala 29:58]
              _T_50 <= _T_71 @[memory-noncombin-ports.scala 157:30]
              skip @[memory-noncombin-ports.scala 155:60]
            else : @[memory-noncombin-ports.scala 158:22]
              _T_50 <= _T_49 @[memory-noncombin-ports.scala 160:30]
              skip @[memory-noncombin-ports.scala 158:22]
          skip @[memory-noncombin-ports.scala 151:39]
        else : @[memory-noncombin-ports.scala 162:20]
          _T_50 <= _T_49 @[memory-noncombin-ports.scala 163:28]
          skip @[memory-noncombin-ports.scala 162:20]
        io.pipeline.readdata <= _T_50 @[memory-noncombin-ports.scala 166:28]
        skip @[memory-noncombin-ports.scala 134:18]
      outstandingReq.valid <= sending @[memory-noncombin-ports.scala 169:26]
      skip @[memory-noncombin-ports.scala 93:32]
    else : @[memory-noncombin-ports.scala 170:16]
      node _T_72 = or(outstandingReq.valid, sending) @[memory-noncombin-ports.scala 172:50]
      outstandingReq.valid <= _T_72 @[memory-noncombin-ports.scala 172:26]
      skip @[memory-noncombin-ports.scala 170:16]
    
  module Pipe : 
    input clock : Clock
    input reset : Reset
    output io : {flip enq : {valid : UInt<1>, bits : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}}, deq : {valid : UInt<1>, bits : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}}}
    
    reg _T : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T <= io.enq.valid @[Valid.scala 117:22]
    reg _T_1 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when io.enq.valid : @[Reg.scala 16:19]
      _T_1.operation <= io.enq.bits.operation @[Reg.scala 16:23]
      _T_1.writedata <= io.enq.bits.writedata @[Reg.scala 16:23]
      _T_1.address <= io.enq.bits.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_2 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_2 <= _T @[Valid.scala 117:22]
    reg _T_3 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T : @[Reg.scala 16:19]
      _T_3.operation <= _T_1.operation @[Reg.scala 16:23]
      _T_3.writedata <= _T_1.writedata @[Reg.scala 16:23]
      _T_3.address <= _T_1.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_4 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_4 <= _T_2 @[Valid.scala 117:22]
    reg _T_5 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_2 : @[Reg.scala 16:19]
      _T_5.operation <= _T_3.operation @[Reg.scala 16:23]
      _T_5.writedata <= _T_3.writedata @[Reg.scala 16:23]
      _T_5.address <= _T_3.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_6 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_6 <= _T_4 @[Valid.scala 117:22]
    reg _T_7 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_4 : @[Reg.scala 16:19]
      _T_7.operation <= _T_5.operation @[Reg.scala 16:23]
      _T_7.writedata <= _T_5.writedata @[Reg.scala 16:23]
      _T_7.address <= _T_5.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_8 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_8 <= _T_6 @[Valid.scala 117:22]
    reg _T_9 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_6 : @[Reg.scala 16:19]
      _T_9.operation <= _T_7.operation @[Reg.scala 16:23]
      _T_9.writedata <= _T_7.writedata @[Reg.scala 16:23]
      _T_9.address <= _T_7.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_10 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_10 <= _T_8 @[Valid.scala 117:22]
    reg _T_11 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_8 : @[Reg.scala 16:19]
      _T_11.operation <= _T_9.operation @[Reg.scala 16:23]
      _T_11.writedata <= _T_9.writedata @[Reg.scala 16:23]
      _T_11.address <= _T_9.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_12 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_12 <= _T_10 @[Valid.scala 117:22]
    reg _T_13 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_10 : @[Reg.scala 16:19]
      _T_13.operation <= _T_11.operation @[Reg.scala 16:23]
      _T_13.writedata <= _T_11.writedata @[Reg.scala 16:23]
      _T_13.address <= _T_11.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_14 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_14 <= _T_12 @[Valid.scala 117:22]
    reg _T_15 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_12 : @[Reg.scala 16:19]
      _T_15.operation <= _T_13.operation @[Reg.scala 16:23]
      _T_15.writedata <= _T_13.writedata @[Reg.scala 16:23]
      _T_15.address <= _T_13.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_16 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_16 <= _T_14 @[Valid.scala 117:22]
    reg _T_17 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_14 : @[Reg.scala 16:19]
      _T_17.operation <= _T_15.operation @[Reg.scala 16:23]
      _T_17.writedata <= _T_15.writedata @[Reg.scala 16:23]
      _T_17.address <= _T_15.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_18 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_18 <= _T_16 @[Valid.scala 117:22]
    reg _T_19 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_16 : @[Reg.scala 16:19]
      _T_19.operation <= _T_17.operation @[Reg.scala 16:23]
      _T_19.writedata <= _T_17.writedata @[Reg.scala 16:23]
      _T_19.address <= _T_17.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_20 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_20 <= _T_18 @[Valid.scala 117:22]
    reg _T_21 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_18 : @[Reg.scala 16:19]
      _T_21.operation <= _T_19.operation @[Reg.scala 16:23]
      _T_21.writedata <= _T_19.writedata @[Reg.scala 16:23]
      _T_21.address <= _T_19.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_22 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_22 <= _T_20 @[Valid.scala 117:22]
    reg _T_23 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_20 : @[Reg.scala 16:19]
      _T_23.operation <= _T_21.operation @[Reg.scala 16:23]
      _T_23.writedata <= _T_21.writedata @[Reg.scala 16:23]
      _T_23.address <= _T_21.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_24 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_24 <= _T_22 @[Valid.scala 117:22]
    reg _T_25 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_22 : @[Reg.scala 16:19]
      _T_25.operation <= _T_23.operation @[Reg.scala 16:23]
      _T_25.writedata <= _T_23.writedata @[Reg.scala 16:23]
      _T_25.address <= _T_23.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_26 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_26 <= _T_24 @[Valid.scala 117:22]
    reg _T_27 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_24 : @[Reg.scala 16:19]
      _T_27.operation <= _T_25.operation @[Reg.scala 16:23]
      _T_27.writedata <= _T_25.writedata @[Reg.scala 16:23]
      _T_27.address <= _T_25.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_28 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_28 <= _T_26 @[Valid.scala 117:22]
    reg _T_29 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_26 : @[Reg.scala 16:19]
      _T_29.operation <= _T_27.operation @[Reg.scala 16:23]
      _T_29.writedata <= _T_27.writedata @[Reg.scala 16:23]
      _T_29.address <= _T_27.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_30 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_30 <= _T_28 @[Valid.scala 117:22]
    reg _T_31 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_28 : @[Reg.scala 16:19]
      _T_31.operation <= _T_29.operation @[Reg.scala 16:23]
      _T_31.writedata <= _T_29.writedata @[Reg.scala 16:23]
      _T_31.address <= _T_29.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_32 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_32 <= _T_30 @[Valid.scala 117:22]
    reg _T_33 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_30 : @[Reg.scala 16:19]
      _T_33.operation <= _T_31.operation @[Reg.scala 16:23]
      _T_33.writedata <= _T_31.writedata @[Reg.scala 16:23]
      _T_33.address <= _T_31.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_34 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_34 <= _T_32 @[Valid.scala 117:22]
    reg _T_35 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_32 : @[Reg.scala 16:19]
      _T_35.operation <= _T_33.operation @[Reg.scala 16:23]
      _T_35.writedata <= _T_33.writedata @[Reg.scala 16:23]
      _T_35.address <= _T_33.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_36 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_36 <= _T_34 @[Valid.scala 117:22]
    reg _T_37 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_34 : @[Reg.scala 16:19]
      _T_37.operation <= _T_35.operation @[Reg.scala 16:23]
      _T_37.writedata <= _T_35.writedata @[Reg.scala 16:23]
      _T_37.address <= _T_35.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_38 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_38 <= _T_36 @[Valid.scala 117:22]
    reg _T_39 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_36 : @[Reg.scala 16:19]
      _T_39.operation <= _T_37.operation @[Reg.scala 16:23]
      _T_39.writedata <= _T_37.writedata @[Reg.scala 16:23]
      _T_39.address <= _T_37.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_40 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_40 <= _T_38 @[Valid.scala 117:22]
    reg _T_41 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_38 : @[Reg.scala 16:19]
      _T_41.operation <= _T_39.operation @[Reg.scala 16:23]
      _T_41.writedata <= _T_39.writedata @[Reg.scala 16:23]
      _T_41.address <= _T_39.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_42 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_42 <= _T_40 @[Valid.scala 117:22]
    reg _T_43 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_40 : @[Reg.scala 16:19]
      _T_43.operation <= _T_41.operation @[Reg.scala 16:23]
      _T_43.writedata <= _T_41.writedata @[Reg.scala 16:23]
      _T_43.address <= _T_41.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_44 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_44 <= _T_42 @[Valid.scala 117:22]
    reg _T_45 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_42 : @[Reg.scala 16:19]
      _T_45.operation <= _T_43.operation @[Reg.scala 16:23]
      _T_45.writedata <= _T_43.writedata @[Reg.scala 16:23]
      _T_45.address <= _T_43.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_46 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_46 <= _T_44 @[Valid.scala 117:22]
    reg _T_47 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_44 : @[Reg.scala 16:19]
      _T_47.operation <= _T_45.operation @[Reg.scala 16:23]
      _T_47.writedata <= _T_45.writedata @[Reg.scala 16:23]
      _T_47.address <= _T_45.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_48 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_48 <= _T_46 @[Valid.scala 117:22]
    reg _T_49 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_46 : @[Reg.scala 16:19]
      _T_49.operation <= _T_47.operation @[Reg.scala 16:23]
      _T_49.writedata <= _T_47.writedata @[Reg.scala 16:23]
      _T_49.address <= _T_47.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_50 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_50 <= _T_48 @[Valid.scala 117:22]
    reg _T_51 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_48 : @[Reg.scala 16:19]
      _T_51.operation <= _T_49.operation @[Reg.scala 16:23]
      _T_51.writedata <= _T_49.writedata @[Reg.scala 16:23]
      _T_51.address <= _T_49.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_52 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_52 <= _T_50 @[Valid.scala 117:22]
    reg _T_53 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_50 : @[Reg.scala 16:19]
      _T_53.operation <= _T_51.operation @[Reg.scala 16:23]
      _T_53.writedata <= _T_51.writedata @[Reg.scala 16:23]
      _T_53.address <= _T_51.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_54 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_54 <= _T_52 @[Valid.scala 117:22]
    reg _T_55 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_52 : @[Reg.scala 16:19]
      _T_55.operation <= _T_53.operation @[Reg.scala 16:23]
      _T_55.writedata <= _T_53.writedata @[Reg.scala 16:23]
      _T_55.address <= _T_53.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_56 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_56 <= _T_54 @[Valid.scala 117:22]
    reg _T_57 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_54 : @[Reg.scala 16:19]
      _T_57.operation <= _T_55.operation @[Reg.scala 16:23]
      _T_57.writedata <= _T_55.writedata @[Reg.scala 16:23]
      _T_57.address <= _T_55.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_58 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_58 <= _T_56 @[Valid.scala 117:22]
    reg _T_59 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_56 : @[Reg.scala 16:19]
      _T_59.operation <= _T_57.operation @[Reg.scala 16:23]
      _T_59.writedata <= _T_57.writedata @[Reg.scala 16:23]
      _T_59.address <= _T_57.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_60 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_60 <= _T_58 @[Valid.scala 117:22]
    reg _T_61 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_58 : @[Reg.scala 16:19]
      _T_61.operation <= _T_59.operation @[Reg.scala 16:23]
      _T_61.writedata <= _T_59.writedata @[Reg.scala 16:23]
      _T_61.address <= _T_59.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_62 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_62 <= _T_60 @[Valid.scala 117:22]
    reg _T_63 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_60 : @[Reg.scala 16:19]
      _T_63.operation <= _T_61.operation @[Reg.scala 16:23]
      _T_63.writedata <= _T_61.writedata @[Reg.scala 16:23]
      _T_63.address <= _T_61.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    wire _T_64 : {valid : UInt<1>, bits : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}} @[Valid.scala 112:21]
    _T_64.valid <= _T_62 @[Valid.scala 113:17]
    _T_64.bits.operation <= _T_63.operation @[Valid.scala 114:16]
    _T_64.bits.writedata <= _T_63.writedata @[Valid.scala 114:16]
    _T_64.bits.address <= _T_63.address @[Valid.scala 114:16]
    io.deq.bits.operation <= _T_64.bits.operation @[Valid.scala 187:10]
    io.deq.bits.writedata <= _T_64.bits.writedata @[Valid.scala 187:10]
    io.deq.bits.address <= _T_64.bits.address @[Valid.scala 187:10]
    io.deq.valid <= _T_64.valid @[Valid.scala 187:10]
    
  module Pipe_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip enq : {valid : UInt<1>, bits : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}}, deq : {valid : UInt<1>, bits : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}}}
    
    reg _T : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T <= io.enq.valid @[Valid.scala 117:22]
    reg _T_1 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when io.enq.valid : @[Reg.scala 16:19]
      _T_1.operation <= io.enq.bits.operation @[Reg.scala 16:23]
      _T_1.writedata <= io.enq.bits.writedata @[Reg.scala 16:23]
      _T_1.address <= io.enq.bits.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_2 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_2 <= _T @[Valid.scala 117:22]
    reg _T_3 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T : @[Reg.scala 16:19]
      _T_3.operation <= _T_1.operation @[Reg.scala 16:23]
      _T_3.writedata <= _T_1.writedata @[Reg.scala 16:23]
      _T_3.address <= _T_1.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_4 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_4 <= _T_2 @[Valid.scala 117:22]
    reg _T_5 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_2 : @[Reg.scala 16:19]
      _T_5.operation <= _T_3.operation @[Reg.scala 16:23]
      _T_5.writedata <= _T_3.writedata @[Reg.scala 16:23]
      _T_5.address <= _T_3.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_6 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_6 <= _T_4 @[Valid.scala 117:22]
    reg _T_7 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_4 : @[Reg.scala 16:19]
      _T_7.operation <= _T_5.operation @[Reg.scala 16:23]
      _T_7.writedata <= _T_5.writedata @[Reg.scala 16:23]
      _T_7.address <= _T_5.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_8 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_8 <= _T_6 @[Valid.scala 117:22]
    reg _T_9 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_6 : @[Reg.scala 16:19]
      _T_9.operation <= _T_7.operation @[Reg.scala 16:23]
      _T_9.writedata <= _T_7.writedata @[Reg.scala 16:23]
      _T_9.address <= _T_7.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_10 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_10 <= _T_8 @[Valid.scala 117:22]
    reg _T_11 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_8 : @[Reg.scala 16:19]
      _T_11.operation <= _T_9.operation @[Reg.scala 16:23]
      _T_11.writedata <= _T_9.writedata @[Reg.scala 16:23]
      _T_11.address <= _T_9.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_12 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_12 <= _T_10 @[Valid.scala 117:22]
    reg _T_13 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_10 : @[Reg.scala 16:19]
      _T_13.operation <= _T_11.operation @[Reg.scala 16:23]
      _T_13.writedata <= _T_11.writedata @[Reg.scala 16:23]
      _T_13.address <= _T_11.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_14 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_14 <= _T_12 @[Valid.scala 117:22]
    reg _T_15 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_12 : @[Reg.scala 16:19]
      _T_15.operation <= _T_13.operation @[Reg.scala 16:23]
      _T_15.writedata <= _T_13.writedata @[Reg.scala 16:23]
      _T_15.address <= _T_13.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_16 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_16 <= _T_14 @[Valid.scala 117:22]
    reg _T_17 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_14 : @[Reg.scala 16:19]
      _T_17.operation <= _T_15.operation @[Reg.scala 16:23]
      _T_17.writedata <= _T_15.writedata @[Reg.scala 16:23]
      _T_17.address <= _T_15.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_18 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_18 <= _T_16 @[Valid.scala 117:22]
    reg _T_19 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_16 : @[Reg.scala 16:19]
      _T_19.operation <= _T_17.operation @[Reg.scala 16:23]
      _T_19.writedata <= _T_17.writedata @[Reg.scala 16:23]
      _T_19.address <= _T_17.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_20 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_20 <= _T_18 @[Valid.scala 117:22]
    reg _T_21 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_18 : @[Reg.scala 16:19]
      _T_21.operation <= _T_19.operation @[Reg.scala 16:23]
      _T_21.writedata <= _T_19.writedata @[Reg.scala 16:23]
      _T_21.address <= _T_19.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_22 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_22 <= _T_20 @[Valid.scala 117:22]
    reg _T_23 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_20 : @[Reg.scala 16:19]
      _T_23.operation <= _T_21.operation @[Reg.scala 16:23]
      _T_23.writedata <= _T_21.writedata @[Reg.scala 16:23]
      _T_23.address <= _T_21.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_24 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_24 <= _T_22 @[Valid.scala 117:22]
    reg _T_25 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_22 : @[Reg.scala 16:19]
      _T_25.operation <= _T_23.operation @[Reg.scala 16:23]
      _T_25.writedata <= _T_23.writedata @[Reg.scala 16:23]
      _T_25.address <= _T_23.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_26 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_26 <= _T_24 @[Valid.scala 117:22]
    reg _T_27 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_24 : @[Reg.scala 16:19]
      _T_27.operation <= _T_25.operation @[Reg.scala 16:23]
      _T_27.writedata <= _T_25.writedata @[Reg.scala 16:23]
      _T_27.address <= _T_25.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_28 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_28 <= _T_26 @[Valid.scala 117:22]
    reg _T_29 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_26 : @[Reg.scala 16:19]
      _T_29.operation <= _T_27.operation @[Reg.scala 16:23]
      _T_29.writedata <= _T_27.writedata @[Reg.scala 16:23]
      _T_29.address <= _T_27.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_30 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_30 <= _T_28 @[Valid.scala 117:22]
    reg _T_31 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_28 : @[Reg.scala 16:19]
      _T_31.operation <= _T_29.operation @[Reg.scala 16:23]
      _T_31.writedata <= _T_29.writedata @[Reg.scala 16:23]
      _T_31.address <= _T_29.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_32 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_32 <= _T_30 @[Valid.scala 117:22]
    reg _T_33 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_30 : @[Reg.scala 16:19]
      _T_33.operation <= _T_31.operation @[Reg.scala 16:23]
      _T_33.writedata <= _T_31.writedata @[Reg.scala 16:23]
      _T_33.address <= _T_31.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_34 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_34 <= _T_32 @[Valid.scala 117:22]
    reg _T_35 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_32 : @[Reg.scala 16:19]
      _T_35.operation <= _T_33.operation @[Reg.scala 16:23]
      _T_35.writedata <= _T_33.writedata @[Reg.scala 16:23]
      _T_35.address <= _T_33.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_36 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_36 <= _T_34 @[Valid.scala 117:22]
    reg _T_37 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_34 : @[Reg.scala 16:19]
      _T_37.operation <= _T_35.operation @[Reg.scala 16:23]
      _T_37.writedata <= _T_35.writedata @[Reg.scala 16:23]
      _T_37.address <= _T_35.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_38 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_38 <= _T_36 @[Valid.scala 117:22]
    reg _T_39 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_36 : @[Reg.scala 16:19]
      _T_39.operation <= _T_37.operation @[Reg.scala 16:23]
      _T_39.writedata <= _T_37.writedata @[Reg.scala 16:23]
      _T_39.address <= _T_37.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_40 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_40 <= _T_38 @[Valid.scala 117:22]
    reg _T_41 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_38 : @[Reg.scala 16:19]
      _T_41.operation <= _T_39.operation @[Reg.scala 16:23]
      _T_41.writedata <= _T_39.writedata @[Reg.scala 16:23]
      _T_41.address <= _T_39.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_42 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_42 <= _T_40 @[Valid.scala 117:22]
    reg _T_43 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_40 : @[Reg.scala 16:19]
      _T_43.operation <= _T_41.operation @[Reg.scala 16:23]
      _T_43.writedata <= _T_41.writedata @[Reg.scala 16:23]
      _T_43.address <= _T_41.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_44 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_44 <= _T_42 @[Valid.scala 117:22]
    reg _T_45 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_42 : @[Reg.scala 16:19]
      _T_45.operation <= _T_43.operation @[Reg.scala 16:23]
      _T_45.writedata <= _T_43.writedata @[Reg.scala 16:23]
      _T_45.address <= _T_43.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_46 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_46 <= _T_44 @[Valid.scala 117:22]
    reg _T_47 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_44 : @[Reg.scala 16:19]
      _T_47.operation <= _T_45.operation @[Reg.scala 16:23]
      _T_47.writedata <= _T_45.writedata @[Reg.scala 16:23]
      _T_47.address <= _T_45.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_48 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_48 <= _T_46 @[Valid.scala 117:22]
    reg _T_49 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_46 : @[Reg.scala 16:19]
      _T_49.operation <= _T_47.operation @[Reg.scala 16:23]
      _T_49.writedata <= _T_47.writedata @[Reg.scala 16:23]
      _T_49.address <= _T_47.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_50 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_50 <= _T_48 @[Valid.scala 117:22]
    reg _T_51 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_48 : @[Reg.scala 16:19]
      _T_51.operation <= _T_49.operation @[Reg.scala 16:23]
      _T_51.writedata <= _T_49.writedata @[Reg.scala 16:23]
      _T_51.address <= _T_49.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_52 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_52 <= _T_50 @[Valid.scala 117:22]
    reg _T_53 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_50 : @[Reg.scala 16:19]
      _T_53.operation <= _T_51.operation @[Reg.scala 16:23]
      _T_53.writedata <= _T_51.writedata @[Reg.scala 16:23]
      _T_53.address <= _T_51.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_54 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_54 <= _T_52 @[Valid.scala 117:22]
    reg _T_55 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_52 : @[Reg.scala 16:19]
      _T_55.operation <= _T_53.operation @[Reg.scala 16:23]
      _T_55.writedata <= _T_53.writedata @[Reg.scala 16:23]
      _T_55.address <= _T_53.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_56 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_56 <= _T_54 @[Valid.scala 117:22]
    reg _T_57 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_54 : @[Reg.scala 16:19]
      _T_57.operation <= _T_55.operation @[Reg.scala 16:23]
      _T_57.writedata <= _T_55.writedata @[Reg.scala 16:23]
      _T_57.address <= _T_55.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_58 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_58 <= _T_56 @[Valid.scala 117:22]
    reg _T_59 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_56 : @[Reg.scala 16:19]
      _T_59.operation <= _T_57.operation @[Reg.scala 16:23]
      _T_59.writedata <= _T_57.writedata @[Reg.scala 16:23]
      _T_59.address <= _T_57.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_60 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_60 <= _T_58 @[Valid.scala 117:22]
    reg _T_61 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_58 : @[Reg.scala 16:19]
      _T_61.operation <= _T_59.operation @[Reg.scala 16:23]
      _T_61.writedata <= _T_59.writedata @[Reg.scala 16:23]
      _T_61.address <= _T_59.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_62 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_62 <= _T_60 @[Valid.scala 117:22]
    reg _T_63 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}, clock @[Reg.scala 15:16]
    when _T_60 : @[Reg.scala 16:19]
      _T_63.operation <= _T_61.operation @[Reg.scala 16:23]
      _T_63.writedata <= _T_61.writedata @[Reg.scala 16:23]
      _T_63.address <= _T_61.address @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    wire _T_64 : {valid : UInt<1>, bits : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}} @[Valid.scala 112:21]
    _T_64.valid <= _T_62 @[Valid.scala 113:17]
    _T_64.bits.operation <= _T_63.operation @[Valid.scala 114:16]
    _T_64.bits.writedata <= _T_63.writedata @[Valid.scala 114:16]
    _T_64.bits.address <= _T_63.address @[Valid.scala 114:16]
    io.deq.bits.operation <= _T_64.bits.operation @[Valid.scala 187:10]
    io.deq.bits.writedata <= _T_64.bits.writedata @[Valid.scala 187:10]
    io.deq.bits.address <= _T_64.bits.address @[Valid.scala 187:10]
    io.deq.valid <= _T_64.valid @[Valid.scala 187:10]
    
  module DualPortedNonCombinMemory : 
    input clock : Clock
    input reset : Reset
    output io : {imem : {flip request : {flip ready : UInt<1>, valid : UInt<1>, bits : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}}, response : {valid : UInt<1>, bits : {data : UInt<32>}}}, dmem : {flip request : {flip ready : UInt<1>, valid : UInt<1>, bits : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}}, response : {valid : UInt<1>, bits : {data : UInt<32>}}}}
    
    io.imem.request.bits.operation is invalid @[base-memory-components.scala 32:19]
    io.imem.request.bits.writedata is invalid @[base-memory-components.scala 32:19]
    io.imem.request.bits.address is invalid @[base-memory-components.scala 32:19]
    io.imem.request.valid is invalid @[base-memory-components.scala 32:19]
    io.imem.request.ready is invalid @[base-memory-components.scala 32:19]
    io.dmem.request.bits.operation is invalid @[base-memory-components.scala 33:19]
    io.dmem.request.bits.writedata is invalid @[base-memory-components.scala 33:19]
    io.dmem.request.bits.address is invalid @[base-memory-components.scala 33:19]
    io.dmem.request.valid is invalid @[base-memory-components.scala 33:19]
    io.dmem.request.ready is invalid @[base-memory-components.scala 33:19]
    wire _T : {valid : UInt<1>, bits : {data : UInt<32>}} @[base-memory-components.scala 36:35]
    _T.bits.data <= UInt<32>("h00") @[base-memory-components.scala 36:35]
    _T.valid <= UInt<1>("h00") @[base-memory-components.scala 36:35]
    io.imem.response.bits.data <= _T.bits.data @[base-memory-components.scala 36:20]
    io.imem.response.valid <= _T.valid @[base-memory-components.scala 36:20]
    wire _T_1 : {valid : UInt<1>, bits : {data : UInt<32>}} @[base-memory-components.scala 37:35]
    _T_1.bits.data <= UInt<32>("h00") @[base-memory-components.scala 37:35]
    _T_1.valid <= UInt<1>("h00") @[base-memory-components.scala 37:35]
    io.dmem.response.bits.data <= _T_1.bits.data @[base-memory-components.scala 37:20]
    io.dmem.response.valid <= _T_1.valid @[base-memory-components.scala 37:20]
    cmem memory : UInt<32>[512] @[base-memory-components.scala 39:19]
    inst imemPipe of Pipe @[memory-noncombin.scala 34:24]
    imemPipe.clock <= clock
    imemPipe.reset <= reset
    imemPipe.io.enq.bits.operation is invalid @[memory-noncombin.scala 22:27]
    imemPipe.io.enq.bits.writedata is invalid @[memory-noncombin.scala 22:27]
    imemPipe.io.enq.bits.address is invalid @[memory-noncombin.scala 22:27]
    imemPipe.io.enq.valid <= UInt<1>("h00") @[memory-noncombin.scala 23:27]
    io.imem.response.valid <= UInt<1>("h00") @[memory-noncombin.scala 24:27]
    io.imem.request.ready <= UInt<1>("h01") @[memory-noncombin.scala 29:26]
    when io.imem.request.valid : @[memory-noncombin.scala 38:32]
      imemPipe.io.enq.bits.operation <= io.imem.request.bits.operation @[memory-noncombin.scala 41:27]
      imemPipe.io.enq.bits.writedata <= io.imem.request.bits.writedata @[memory-noncombin.scala 41:27]
      imemPipe.io.enq.bits.address <= io.imem.request.bits.address @[memory-noncombin.scala 41:27]
      imemPipe.io.enq.valid <= UInt<1>("h01") @[memory-noncombin.scala 42:27]
      skip @[memory-noncombin.scala 38:32]
    else : @[memory-noncombin.scala 43:16]
      imemPipe.io.enq.valid <= UInt<1>("h00") @[memory-noncombin.scala 44:27]
      skip @[memory-noncombin.scala 43:16]
    when imemPipe.io.deq.valid : @[memory-noncombin.scala 47:32]
      node _T_2 = eq(imemPipe.io.deq.bits.operation, UInt<1>("h00")) @[memory-noncombin.scala 49:43]
      node _T_3 = asUInt(reset) @[memory-noncombin.scala 49:11]
      node _T_4 = or(_T_2, _T_3) @[memory-noncombin.scala 49:11]
      node _T_5 = eq(_T_4, UInt<1>("h00")) @[memory-noncombin.scala 49:11]
      when _T_5 : @[memory-noncombin.scala 49:11]
        printf(clock, UInt<1>(1), "Assertion failed\n    at memory-noncombin.scala:49 assert(imemPipe.io.deq.bits.operation === Read)\n") @[memory-noncombin.scala 49:11]
        stop(clock, UInt<1>(1), 1) @[memory-noncombin.scala 49:11]
        skip @[memory-noncombin.scala 49:11]
      node _T_6 = lt(imemPipe.io.deq.bits.address, UInt<12>("h0800")) @[memory-noncombin.scala 52:32]
      node _T_7 = asUInt(reset) @[memory-noncombin.scala 52:12]
      node _T_8 = or(_T_6, _T_7) @[memory-noncombin.scala 52:12]
      node _T_9 = eq(_T_8, UInt<1>("h00")) @[memory-noncombin.scala 52:12]
      when _T_9 : @[memory-noncombin.scala 52:12]
        printf(clock, UInt<1>(1), "Assertion failed\n    at memory-noncombin.scala:52 assert (outRequest.address < size.U)\n") @[memory-noncombin.scala 52:12]
        stop(clock, UInt<1>(1), 1) @[memory-noncombin.scala 52:12]
        skip @[memory-noncombin.scala 52:12]
      io.imem.response.valid <= UInt<1>("h01") @[memory-noncombin.scala 53:35]
      node _T_10 = shr(imemPipe.io.deq.bits.address, 2) @[memory-noncombin.scala 54:64]
      node _T_11 = bits(_T_10, 8, 0) @[memory-noncombin.scala 54:44]
      infer mport _T_12 = memory[_T_11], clock @[memory-noncombin.scala 54:44]
      io.imem.response.bits.data <= _T_12 @[memory-noncombin.scala 54:35]
      skip @[memory-noncombin.scala 47:32]
    else : @[memory-noncombin.scala 55:16]
      io.imem.response.valid <= UInt<1>("h00") @[memory-noncombin.scala 57:28]
      skip @[memory-noncombin.scala 55:16]
    inst dmemPipe of Pipe_1 @[memory-noncombin.scala 62:28]
    dmemPipe.clock <= clock
    dmemPipe.reset <= reset
    dmemPipe.io.enq.bits.operation is invalid @[memory-noncombin.scala 22:27]
    dmemPipe.io.enq.bits.writedata is invalid @[memory-noncombin.scala 22:27]
    dmemPipe.io.enq.bits.address is invalid @[memory-noncombin.scala 22:27]
    dmemPipe.io.enq.valid <= UInt<1>("h00") @[memory-noncombin.scala 23:27]
    io.dmem.response.valid <= UInt<1>("h00") @[memory-noncombin.scala 24:27]
    io.dmem.request.ready <= UInt<1>("h01") @[memory-noncombin.scala 29:26]
    when io.dmem.request.valid : @[memory-noncombin.scala 66:32]
      dmemPipe.io.enq.bits.operation <= io.dmem.request.bits.operation @[memory-noncombin.scala 69:27]
      dmemPipe.io.enq.bits.writedata <= io.dmem.request.bits.writedata @[memory-noncombin.scala 69:27]
      dmemPipe.io.enq.bits.address <= io.dmem.request.bits.address @[memory-noncombin.scala 69:27]
      dmemPipe.io.enq.valid <= UInt<1>("h01") @[memory-noncombin.scala 70:27]
      skip @[memory-noncombin.scala 66:32]
    else : @[memory-noncombin.scala 71:16]
      dmemPipe.io.enq.valid <= UInt<1>("h00") @[memory-noncombin.scala 72:27]
      skip @[memory-noncombin.scala 71:16]
    when dmemPipe.io.deq.valid : @[memory-noncombin.scala 75:32]
      node _T_13 = neq(dmemPipe.io.deq.bits.operation, UInt<2>("h02")) @[memory-noncombin.scala 76:44]
      node _T_14 = asUInt(reset) @[memory-noncombin.scala 76:12]
      node _T_15 = or(_T_13, _T_14) @[memory-noncombin.scala 76:12]
      node _T_16 = eq(_T_15, UInt<1>("h00")) @[memory-noncombin.scala 76:12]
      when _T_16 : @[memory-noncombin.scala 76:12]
        printf(clock, UInt<1>(1), "Assertion failed\n    at memory-noncombin.scala:76 assert (dmemPipe.io.deq.bits.operation =/= ReadWrite)\n") @[memory-noncombin.scala 76:12]
        stop(clock, UInt<1>(1), 1) @[memory-noncombin.scala 76:12]
        skip @[memory-noncombin.scala 76:12]
      node _T_17 = shr(dmemPipe.io.deq.bits.address, 2) @[memory-noncombin.scala 79:38]
      node _T_18 = lt(dmemPipe.io.deq.bits.address, UInt<12>("h0800")) @[memory-noncombin.scala 81:32]
      node _T_19 = asUInt(reset) @[memory-noncombin.scala 81:12]
      node _T_20 = or(_T_18, _T_19) @[memory-noncombin.scala 81:12]
      node _T_21 = eq(_T_20, UInt<1>("h00")) @[memory-noncombin.scala 81:12]
      when _T_21 : @[memory-noncombin.scala 81:12]
        printf(clock, UInt<1>(1), "Assertion failed\n    at memory-noncombin.scala:81 assert (outRequest.address < size.U)\n") @[memory-noncombin.scala 81:12]
        stop(clock, UInt<1>(1), 1) @[memory-noncombin.scala 81:12]
        skip @[memory-noncombin.scala 81:12]
      node _T_22 = eq(dmemPipe.io.deq.bits.operation, UInt<1>("h00")) @[memory-noncombin.scala 83:32]
      when _T_22 : @[memory-noncombin.scala 83:42]
        io.dmem.response.valid <= UInt<1>("h01") @[memory-noncombin.scala 84:37]
        node _T_23 = bits(_T_17, 8, 0) @[memory-noncombin.scala 85:46]
        infer mport _T_24 = memory[_T_23], clock @[memory-noncombin.scala 85:46]
        io.dmem.response.bits.data <= _T_24 @[memory-noncombin.scala 85:37]
        skip @[memory-noncombin.scala 83:42]
      else : @[memory-noncombin.scala 86:50]
        node _T_25 = eq(dmemPipe.io.deq.bits.operation, UInt<1>("h01")) @[memory-noncombin.scala 86:39]
        when _T_25 : @[memory-noncombin.scala 86:50]
          io.dmem.response.valid <= UInt<1>("h00") @[memory-noncombin.scala 87:37]
          node _T_26 = bits(_T_17, 8, 0) @[memory-noncombin.scala 88:13]
          infer mport _T_27 = memory[_T_26], clock @[memory-noncombin.scala 88:13]
          _T_27 <= dmemPipe.io.deq.bits.writedata @[memory-noncombin.scala 88:23]
          skip @[memory-noncombin.scala 86:50]
      skip @[memory-noncombin.scala 75:32]
    else : @[memory-noncombin.scala 90:16]
      io.dmem.response.valid <= UInt<1>("h00") @[memory-noncombin.scala 92:28]
      skip @[memory-noncombin.scala 90:16]
    
  module NonCombinMemoryTestHarness : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip imem_address : UInt<32>, flip imem_valid : UInt<1>, imem_instruction : UInt<32>, imem_good : UInt<1>, flip dmem_address : UInt<32>, flip dmem_valid : UInt<1>, flip dmem_writedata : UInt<32>, flip dmem_memread : UInt<1>, flip dmem_memwrite : UInt<1>, flip dmem_maskmode : UInt<2>, flip dmem_sext : UInt<1>, dmem_readdata : UInt<32>, dmem_good : UInt<1>}
    
    io.dmem_good is invalid @[NonCombinMemoryUnitTest.scala 40:6]
    io.dmem_readdata is invalid @[NonCombinMemoryUnitTest.scala 40:6]
    io.dmem_sext is invalid @[NonCombinMemoryUnitTest.scala 40:6]
    io.dmem_maskmode is invalid @[NonCombinMemoryUnitTest.scala 40:6]
    io.dmem_memwrite is invalid @[NonCombinMemoryUnitTest.scala 40:6]
    io.dmem_memread is invalid @[NonCombinMemoryUnitTest.scala 40:6]
    io.dmem_writedata is invalid @[NonCombinMemoryUnitTest.scala 40:6]
    io.dmem_valid is invalid @[NonCombinMemoryUnitTest.scala 40:6]
    io.dmem_address is invalid @[NonCombinMemoryUnitTest.scala 40:6]
    io.imem_good is invalid @[NonCombinMemoryUnitTest.scala 40:6]
    io.imem_instruction is invalid @[NonCombinMemoryUnitTest.scala 40:6]
    io.imem_valid is invalid @[NonCombinMemoryUnitTest.scala 40:6]
    io.imem_address is invalid @[NonCombinMemoryUnitTest.scala 40:6]
    inst imem of INonCombinMemPort @[NonCombinMemoryUnitTest.scala 42:20]
    imem.clock <= clock
    imem.reset <= reset
    inst dmem of DNonCombinMemPort @[NonCombinMemoryUnitTest.scala 44:20]
    dmem.clock <= clock
    dmem.reset <= reset
    inst memory of DualPortedNonCombinMemory @[NonCombinMemoryUnitTest.scala 45:22]
    memory.clock <= clock
    memory.reset <= reset
    memory.io.dmem.response.bits.data is invalid @[NonCombinMemoryUnitTest.scala 46:13]
    memory.io.dmem.response.valid is invalid @[NonCombinMemoryUnitTest.scala 46:13]
    memory.io.dmem.request.bits.operation is invalid @[NonCombinMemoryUnitTest.scala 46:13]
    memory.io.dmem.request.bits.writedata is invalid @[NonCombinMemoryUnitTest.scala 46:13]
    memory.io.dmem.request.bits.address is invalid @[NonCombinMemoryUnitTest.scala 46:13]
    memory.io.dmem.request.valid is invalid @[NonCombinMemoryUnitTest.scala 46:13]
    memory.io.dmem.request.ready is invalid @[NonCombinMemoryUnitTest.scala 46:13]
    memory.io.imem.response.bits.data is invalid @[NonCombinMemoryUnitTest.scala 46:13]
    memory.io.imem.response.valid is invalid @[NonCombinMemoryUnitTest.scala 46:13]
    memory.io.imem.request.bits.operation is invalid @[NonCombinMemoryUnitTest.scala 46:13]
    memory.io.imem.request.bits.writedata is invalid @[NonCombinMemoryUnitTest.scala 46:13]
    memory.io.imem.request.bits.address is invalid @[NonCombinMemoryUnitTest.scala 46:13]
    memory.io.imem.request.valid is invalid @[NonCombinMemoryUnitTest.scala 46:13]
    memory.io.imem.request.ready is invalid @[NonCombinMemoryUnitTest.scala 46:13]
    imem.io.pipeline.address <= io.imem_address @[NonCombinMemoryUnitTest.scala 49:32]
    imem.io.pipeline.valid <= io.imem_valid @[NonCombinMemoryUnitTest.scala 50:32]
    io.imem_instruction <= imem.io.pipeline.instruction @[NonCombinMemoryUnitTest.scala 51:23]
    io.imem_good <= imem.io.pipeline.good @[NonCombinMemoryUnitTest.scala 52:23]
    dmem.io.pipeline.address <= io.dmem_address @[NonCombinMemoryUnitTest.scala 53:32]
    dmem.io.pipeline.valid <= io.dmem_valid @[NonCombinMemoryUnitTest.scala 54:32]
    dmem.io.pipeline.writedata <= io.dmem_writedata @[NonCombinMemoryUnitTest.scala 55:32]
    dmem.io.pipeline.memread <= io.dmem_memread @[NonCombinMemoryUnitTest.scala 56:32]
    dmem.io.pipeline.memwrite <= io.dmem_memwrite @[NonCombinMemoryUnitTest.scala 57:32]
    dmem.io.pipeline.maskmode <= io.dmem_maskmode @[NonCombinMemoryUnitTest.scala 58:32]
    dmem.io.pipeline.sext <= io.dmem_sext @[NonCombinMemoryUnitTest.scala 59:32]
    io.dmem_readdata <= dmem.io.pipeline.readdata @[NonCombinMemoryUnitTest.scala 60:23]
    io.dmem_good <= dmem.io.pipeline.good @[NonCombinMemoryUnitTest.scala 61:23]
    memory.io.imem.request.bits.operation <= imem.io.bus.request.bits.operation @[base-memory-components.scala 16:26]
    memory.io.imem.request.bits.writedata <= imem.io.bus.request.bits.writedata @[base-memory-components.scala 16:26]
    memory.io.imem.request.bits.address <= imem.io.bus.request.bits.address @[base-memory-components.scala 16:26]
    memory.io.imem.request.valid <= imem.io.bus.request.valid @[base-memory-components.scala 16:26]
    imem.io.bus.request.ready <= memory.io.imem.request.ready @[base-memory-components.scala 16:26]
    imem.io.bus.response.bits.data <= memory.io.imem.response.bits.data @[base-memory-components.scala 17:26]
    imem.io.bus.response.valid <= memory.io.imem.response.valid @[base-memory-components.scala 17:26]
    memory.io.dmem.request.bits.operation <= dmem.io.bus.request.bits.operation @[base-memory-components.scala 19:26]
    memory.io.dmem.request.bits.writedata <= dmem.io.bus.request.bits.writedata @[base-memory-components.scala 19:26]
    memory.io.dmem.request.bits.address <= dmem.io.bus.request.bits.address @[base-memory-components.scala 19:26]
    memory.io.dmem.request.valid <= dmem.io.bus.request.valid @[base-memory-components.scala 19:26]
    dmem.io.bus.request.ready <= memory.io.dmem.request.ready @[base-memory-components.scala 19:26]
    dmem.io.bus.response.bits.data <= memory.io.dmem.response.bits.data @[base-memory-components.scala 20:26]
    dmem.io.bus.response.valid <= memory.io.dmem.response.valid @[base-memory-components.scala 20:26]
    
